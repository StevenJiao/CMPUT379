Name: Steven Jiao
CCID: 1442672
CMPUT 379, FALL21
Date: 10/29/2021
Acknowledgements: N/A
Assignment 2: Producer-Consumer Problem

Included files:
    * prodcon.cpp
    * prodcon.hpp
    * writer.cpp
    * tandc.c
    * Makefile
    * README

Run instructions:
    1. Unzip the prodcon_syjiao.zip file into a working directory
    2. Navigate to the directory and run "make"
    3. The prodcon program can now be run, as specified by assignment 2 specifications
        ex. run the command(s):
            "./prodcon 3 1 <input" or "./prodcon 3 <input" where input is
            a file containing the inputs as formatted for assignment 2 (ex. T for consumer work
            and S for producer sleep), the first position argument (ex. 3) is the number of threads, 
            and second, optional input arg (ex. 1) being the log file name.
            or "./prodcon 3" and specify input on command line (then writing EOF with ctrl+d)
    4. run "make clean" after finishing to clean up executable and object files

About files:
    * prodcon.cpp: 
        * the main file for handling producer parsing of input and 
            directing consumer work as threads. It will also call a writer
            for writing to the output file. 
    * prodcon.hpp: 
        * the header file for prodcon.cpp; contains global vars that are
            accessible by consumers, and other static definitions of string for 
            writing to the log file what the producers and consumers are doing
    * writer.cpp:
        * a writer class that handles the threadsafe appending to an output
            file for logging purposes
        * also contains a struct for holding summary statistics for the
            number of jobs, number of sleeps, and etc.
        * has a timer for logging the time of logs and calculating the 
            work done per second for the summary

General approach:
    * For this problem, I used 2 mutexes.
        * 1 was for locking the logging file inputs in my writer class
        * Another I used to lock access to the queue so only the producer or 1 consumer was 
            accessing at it at all times.
    * I used a loop within the consumer job so that all spawned threads would keep running the 
        loop until we run out of jobs in the queue AND the producer has signalled that it reached EOF of input.
    * 2 pthread_cond_t vars were used for the following:
        * In order to avoid busy wait in consumers while the queue was empty, I included a while condition
            after the consumer locks the queue access mutex to check if the queue was empty or not. If it was, then
            we would invoke the pthread_cond_wait() until the producer has pthread_cond_broadcast() after it inserted
            a new entry. 
        * The same approach was used for when the producer added the maximum allowed entries into the queue, as it also
            calls pthread_cond_wait() until a consumer calls pthread_cond_signal() after it has taken a job off the queue.
    * I also call pthread_cond_broadcast() in the pthread_join() calls for all threads so that it can do its best in 
        catching straggler consumers that may have just missed the previous call
    * Writing to the output file was made into its own thread-safe class called writer (writer.cpp)

Assumptions:
    * Only 2 places I've locked that are considered critical is accessing the queue (to prevent the issue
        of possible 1 consumer seeing a job that is present but is then taken by a second consumer) and the
        writing to the output file so we don't end up with garbled data; each line outputted into the log makes
        sense and is chronological.
    * Keyboard input MUST be terminated with the crtl+d EOF char, and keyboard input is required if no input file
        is specified when prodcon is called.
    * Writing to the same output file will just keep appending to the file. For example, calling "./prodcon 3 1 <input"
        and then "./prodcon 3 1 <input" will write to the same file "prodcon.1.log". The second call will not overwrite
        the existing output file but only append to it.
    * Assumes that the input file or inputs are formatted correctly (ex. always capital 'T' or 'S' followed by integers). There is no error checking for correct inputs for
        producer or consumer commands.
