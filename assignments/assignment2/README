Name: Steven Jiao
CCID: 1442672
CMPUT 379, FALL21
Date: 10/29/2021
Acknowledgements: N/A
Assignment 2: Producer-Consumer Problem

Included files:
    * prodcon.cpp
    * prodcon.hpp
    * writer.cpp
    * tandc.c
    * Makefile
    * README

Run instructions:
    1. Unzip the prodcon_syjiao.zip file into a working directory
    2. Navigate to the directory and run "make"
    3. The prodcon program can now be run, as specified by assignment 2 specifications
        ex. run the command(s):
            "./prodcon 3 1 <input" or "./prodcon 3 <input" where input is
            a file containing the inputs as formatted for assignment 2 (ex. T for consumer work
            and S for producer sleep), the first position argument (ex. 3) is the number of threads, 
            and second, optional input arg (ex. 1) being the log file name.
            or "./prodcon 3" and specify input on command line (then writing EOF with ctrl+d)
    4. run "make clean" after finishing to clean up executable and object files

About files:
    * prodcon.cpp: 
        * the main file for handling producer parsing of input and 
            directing consumer work as threads. It will also call a writer
            for writing to the output file. 
    * prodcon.hpp: 
        * the header file for prodcon.cpp; contains global vars that are
            accessible by consumers, and other static definitions of string for 
            writing to the log file what the producers and consumers are doing
    * writer.cpp:
        * a writer class that handles the threadsafe appending to an output
            file for logging purposes
        * also contains a struct for holding summary statistics for the
            number of jobs, number of sleeps, and etc.
        * has a timer for logging the time of logs and calculating the 
            work done per second for the summary

General approach:
    * For this problem, I used 2 binary semaphores. 1 was for locking the logging file inputs
        and the other was used for locking the reading & popping of the queue once a consumer 
        was able to go in to grab a job.
    * I used a loop within the consumer job so that depending on how many threads I spawned, 
        they would all be running the loop until we run out of jobs in the queue AND the producer
        has signalled that it reached EOF of input.
    * If no other consumer is using the queue/not currently locked, the current consumer will lock the queue 
        during the reading of the next job in the queue, grabbing the queue size, and popping the queue all at once.
        Then after accessing, it will write to the log file and perform its task. If there is no jobs in 
        the queue but the producer hasn't reached EOF of inputs, then the consumer will free the semaphore
        and try again to not hold up the critical section. There is also a check within the critical section
        to see if the producer reached EOF and the queue is empty in case that everything finished while the 
        current thread was in the process of locking the semaphore for the very beginning of reading.
    * writing to the output file was made into its own class called writer -> see writer.cpp

Assumptions:
    * Only 2 places I've locked that are considered critical is accessing the queue (to prevent the issue
        of possible 1 consumer seeing a job that is present but is then taken by a second consumer) and the
        writing to the output file so we don't end up with garbled data; each line outputted into the log makes
        sense and is chronological.
    * Summary printed at the very end will happen AFTER all consumer threads are dead. That is, nothing is 
        accessing the output file -> no lock is in place for mutual exclusion here.
    * Keyboard input MUST be terminated with the crtl+d EOF char, and keyboard input is required if no input file
        is specified when prodcon is called.
    * Writing to the same output file will just keep appending to the file. For example, calling "./prodcon 3 1 <input"
        and then "./prodcon 3 1 <input" will write to the same file "prodcon.1.log". The second call will not overwrite
        the existing output file but only append to it.
